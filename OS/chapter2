1，什么是前趋图？为什么要引入前趋图？
所谓的前趋图，是指一个有向无循环图，可记为DAG，它用于描述进程之间执行的先后顺序。
为了能够更好地描述程序的顺序和并发执行情况，引入了前趋图。
2，试画出下面四条语句的前趋图：
S1:  a=x+y;
S2:  b=z+1;
S3:  c=a-b;
S4:  w=c+1.







3，为什么程序并发执行会产生间断性特征？
程序在并发执行时，由于它们共享系统资源，以及为完成同一项任务而互相合作，致使在这些并发执行的程之间形成了相互制约的关系。而相互制约将导致并发程序具有“执行——暂停——执行”这种间断性的活动规律。
4，程序并发执行时为什么会失去封闭性和可再现性？
当系统中存在着多个可以并发执行的程序时，系统中的各种资源将为它们所共享，而这些资源的状态也由这些程序来改变，致使其中任一程序在运行时，其环境都必然会受到其他程序的影响。例如，当处理机已被分配给某个程序运行时，其它程序必须等待，显然，程序已经失去了封闭性。
程序在并发执行时，由于失去了并发性，其计算结果必将与并发程序的执行速度有关，从而使程序的执行失去了可再现性。换而言之，程序经过多次执行后，虽然将它们执行时的环境和初始条件相同，但得到的结果却各不相同。
5，在操作系统中为什么要引入进程的概念？它会产生什么样的影响？
在多道程序环境下，程序的执行属于并发执行，此时它们将失去封闭性，并且具有间断性，以及其结果不可再现性的特征，这也就决定了通常的程序是不能够参与并发执行的，否则，程序的运行也就失去了意义，为了能够使程序并发执行，并且可以对并发执行的程序加以描述和控制，人们引入了“进程”的概念。
影响：是程序的并发得意执行。
6，试从动态性、并发性和独立性上比较进程和程序。
动态性：进程的实质是进程实体的执行过程，因此动态性就是进程最基本的特征。还表现在：“它由创建而产生，由调度而执行，由撤销而消亡。”可见，进程实体具有一定的生命期，而程序则只是一组有序指令的集合，并存放于某种介质上，其本身并不具有活动的含义，因而是静态的。
并发性：是指多个进程实体可以同时存在于内存之中，且能在一段时间内同时运行。引入进程的，目的也是为了使进程实体能够和其他进程实体并发执行，因此并发性使进程的另一重要特征。而程序（没有建立PCB）是不能参与并发执行的。
独立性：在传统的os中，独立性是指进程实体是一个能够独立运行、独立获得资源和独立接受调度的基本单位。凡是未建立PCB的程序都不能作为一个独立的单位参与运行。
7，试说明PCB的作用具体表现在哪几个方面，为什么说PCB是进程存在的唯一标志？
（1）PCB是进程实体的一部分，记录操作系统所需要的，用于描述进程的当前状态以及管理进程运行的全部信息，是操作系统中最重要的记录型数据结构。
（2）PCB的作用是使一个在多道程序环境下不能独立运行的程序（含数据）成为一个能独立运行的基本单位，一个能与其它进程并发执行的进程。
（3）PCB作为独立运行单位的标志，是进程存在的唯一标志。
（4）PCB能实现间断性运行方式。
（5）PCB提供进程管理、进程调度所需要的信息。
（6）PCB用来实现与其它进程的同步与通信。
操作系统是根据PCB对并发执行的进程进行控制和管理的，当系统创建一个新进程时，就为它建立一个PCB，进程结束时又收回其PCB，进程于是也就随之消亡，系统是通过PCB感知进程的存在的，PCB也就随之成为了进程存在的唯一标志。
8，PCB提供了进程管理和进程调度所需要的哪些信息？  
（1）进程标识符；（2）处理机状态；（3）进程调度信息；（4）进程控制信息。
9，进程控制块的组织方式有哪几种？
（1）线性方式；（2）链接方式；（3）索引方式。
10，何谓操作系统内核？内核的主要功能是什么？
现代操作系统一般将os划分为若干层次，再将os的不同功能分别设置在不同的层次中。通常将一些与硬件紧密相关的模块（如中断处理程序等）、各种常用设备的驱动程序以及运行频率较高的模块（如时钟管理、进程调度和许多模块所公用的一些基本操作），都安排在紧靠硬件的软件层次中，将它们常驻内存，即通常被称为的os内核。
     内核的主要功能是支撑功能和资源管理功能，其中支撑功能包括中断处理、时钟管理、原语操作；资源管理功能包括进程管理、存储器管理、设备管理。
11，试说明进程在三个基本状态之间转换的典型原因。
就绪状态     执行状态：进程调度
执行状态     就绪状态：时间片用完
执行状态     阻塞状态：I/O请求
阻塞状态     就绪状态：I/O完成
12，为什么要引入挂起状态？该状态有哪些性质？
引入挂起操作的原因，是基于用户和系统的如下需要：
（1）终端用户的需要；
（2）父进程的请求；
（3）负荷调节的需要；
（4）操作系统的需要。
处于挂起状态的进程最重要的特点就是主动放弃CPU调度。引入挂起状态之后，系统又增加了活动就绪、静止就绪、活动阻塞、静止阻塞四个状态，并增加了活动就绪与静止就绪之间的转换，活动阻塞与静止阻塞之间的转换。
13，在进行进程切换时，所要保存的处理机状态信息有哪些？
    处理机状态信息主要是由处理机的各种寄存器中的内容组成的，这些寄存器包括（1）通用寄存器；（2）指令计数器；（3）程序状态字PSW；（4）用户栈指针
14，试说明引起进程创建的主要事件。
（1）用户登录；（2）作业调度；（3）提供服务；（4）应用请求。
15，试说明引起进程被撤销的主要事件。
     （1）正常结束；（2）异常结束（越界错，非法指令，保护错，特权指令错，运行超时，等待超时，算数运算错，I/O故障）；（3）外界干预（操作员或操作系统干预，父进程请求，因父进程终止）
12，在创建一个进程时所要完成的主要工作是什么？
（1）申请空白PCB，为新进程申请获得唯一的数字标识符，并从PCB集合中索取一个空白PCB。
（2）为新进程分配其运行所需的资源，包括各种物理和逻辑资源，如内存、文件、I/O设备和CPU时间等。
（3）初始化进程控制块（PCB）。
（4）如果进程就绪队列能够接纳新进程，便将新进程插入就绪队列。
13，在撤销一个进程时所要完成的主要工作是什么？
（1）根据被终止进程的标识符，从PCB集合中检索出该进程的PCB，从中读取出该进程的状态；
（2）若被终止进程正处于执行状态，应立即终止该进程的执行，并置调度标志为真，用于指示该进程被终止后应重新进行调度；
（3）若该进程还有子孙进程，还应将所有子孙进程也都予以终止，以防止它们成为不可控的进程；
（4）将被终止进程所拥有的全部资源或者归还给其父进程，或者归还给系统；
（5）将被终止进程（PCB）从所在队列（或链表）中移出，等待其他程序来搜集信息。
14，试说明引起进程被阻塞或被唤醒的主要事件是什么？
（1）向系统请求共享资源失败。
（2）等待某种操作的完成。
（3）新数据尚未到达。
（4）等待新任务的到达。
15，为什么要在os中引入线程？
如果说，在os中引入进程的目的是为了使多个程序能够并发执行，以提高资源利用率和系统吞吐量，那么，在操作系统中再引入线程，则是为了减少程序在并发执行时所付出的时空开销，使os具有更好的并发性，提高CPU的利用率。进程作为资源分配的基本单位，而线程则作为独立运行和独立调度的基本单位。
16，试说明线程具有哪些属性？
（1）轻型实体；（2）独立调度和分派的基本单位；（3）可并发执行；（4）共享进程资源。
17，试从调度性、并发性、拥有资源及系统开销方面对进程和线程进行比较。
调度性：
     在现代操作系统中，进程作为资源分配的基本单位，而线程则作为独立运行和独立调度的基本单位。
并发性：
     进程之间可以并发执行，在一个进程中的多个线程之间也可以并发执行。
拥有资源：
     进程可以拥有资源，并作为系统中拥有资源的一个基本单位，然而线程本身并不拥有系统资源，而且仅有一点必不可少的、能保证独立运行的资源；线程除了拥有自己的少量资源外，还允许多个线程共享该进程所拥有的资源。
系统开销：
     在创建和撤销进程时，系统都要为之分配和回收进程控制块、分配或回收其他资源，如内存空间和I/O设备等。Os所为此付出的开销明显大于线程创建或撤销时所付出的开销。类似地，在进程切换时，涉及到进程上下文的切换，而线程的切换代价也远低于进程的。
18，线程控制块TCB中包含了哪些内容？
（1）线程标识符；（2）一组寄存器，包括程序计数器PC和状态寄存器和通用寄存器的内容；（3）线程运行状态，用于描述线程正处于何种运行状态；（4）优先级，描述线程执行的优先程度；（5）线程专有存储区；（6）信号屏蔽；（7）堆栈指针
19，何谓用户级线程和内核支持线程？
线程的实现可以分为两类：用户级线程和内核支持线程，用户级线程不需要内核支持而在用户程序中实现的线程，其不依赖于操作系统核心，应用进程线程库提供创建、同步、调度和管理线程的函数来控制用户线程；内核支持线程由操作系统内核创建和撤销，内核维护进程机线程的上下文信息以及线程切换，一个内核线程由于I/O操作而阻塞，不会影响其它线程的运行。
20，试说明用户级线程的实现方法。
用户级线程是在用户空间实现的，运行在“运行实时系统”与“内核控制线程”的中间系统上。运行时系统用于管理和控制线程的函数的集合。
21，试说明内核支持线程的实现方法。
    系统在创建新进程时，分配一个任务数据区PTDA，其中包括若干个线程控制块TCB空间。创建一个线程，分配一个TCB，有关信息写入TCB，为之分配必要的资源。当PTDA中的TCB用完，而进程又有新线程时，只要所创建的线程数目未超过系统允许值，系统可在为之分配新的TCB；在撤销一个线程时，也应回收线程的所有资源和TCB。
22，多线程模型有哪几种类型？多对一模型有何优缺点？
    
